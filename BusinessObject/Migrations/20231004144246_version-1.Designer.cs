// <auto-generated />
using System;
using BusinessObject;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BusinessObject.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20231004144246_version-1")]
    partial class version1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("BusinessObject.DataTransfer.SenderConversation", b =>
                {
                    b.Property<string>("Avatar")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("ConversationId")
                        .HasColumnType("bigint");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Fullname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToView(null);
                });

            modelBuilder.Entity("BusinessObject.Entities.AccessToken", b =>
                {
                    b.Property<long>("AccessTokenId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("AccessTokenId"), 1L, 1);

                    b.Property<DateTime>("ExpiredDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRevoked")
                        .HasColumnType("bit");

                    b.Property<string>("JwtId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Token")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("AccessTokenId");

                    b.HasIndex("UserId");

                    b.ToTable("AccessToken");
                });

            modelBuilder.Entity("BusinessObject.Entities.AssetInformation", b =>
                {
                    b.Property<long>("AssetInformationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("AssetInformationId"), 1L, 1);

                    b.Property<string>("Asset")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<long?>("OrderId")
                        .HasColumnType("bigint");

                    b.Property<long>("ProductVariantId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("AssetInformationId");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductVariantId");

                    b.HasIndex("UserId");

                    b.ToTable("AssetInformation");
                });

            modelBuilder.Entity("BusinessObject.Entities.Bank", b =>
                {
                    b.Property<long>("BankId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("BankId"), 1L, 1);

                    b.Property<string>("BankCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BankName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isActivate")
                        .HasColumnType("bit");

                    b.HasKey("BankId");

                    b.ToTable("Bank");

                    b.HasData(
                        new
                        {
                            BankId = 458761L,
                            BankCode = "HSBC",
                            BankName = "TNHH MTV HSBC Việt Nam (HSBC)",
                            isActivate = true
                        },
                        new
                        {
                            BankId = 970403L,
                            BankCode = "STB",
                            BankName = "Sacombank (STB)",
                            isActivate = true
                        },
                        new
                        {
                            BankId = 970405L,
                            BankCode = "VBA",
                            BankName = "Nông nghiệp và Phát triển nông thôn (VBA)",
                            isActivate = true
                        },
                        new
                        {
                            BankId = 970407L,
                            BankCode = "TCB",
                            BankName = "Kỹ Thương (TCB)",
                            isActivate = true
                        },
                        new
                        {
                            BankId = 970415L,
                            BankCode = "VIETINBANK",
                            BankName = "Công Thương Việt Nam (VIETINBANK)",
                            isActivate = true
                        },
                        new
                        {
                            BankId = 970418L,
                            BankCode = "BIDV",
                            BankName = "Đầu tư và phát triển (BIDV)",
                            isActivate = true
                        },
                        new
                        {
                            BankId = 970422L,
                            BankCode = "MB",
                            BankName = "Quân đội (MB)",
                            isActivate = true
                        },
                        new
                        {
                            BankId = 970423L,
                            BankCode = "TPB",
                            BankName = "Tiên Phong (TPB)",
                            isActivate = true
                        },
                        new
                        {
                            BankId = 970426L,
                            BankCode = "MSB",
                            BankName = "Hàng hải (MSB)",
                            isActivate = true
                        },
                        new
                        {
                            BankId = 970432L,
                            BankCode = "VPB",
                            BankName = "Việt Nam Thinh Vượng (VPB)",
                            isActivate = true
                        },
                        new
                        {
                            BankId = 970436L,
                            BankCode = "VCB",
                            BankName = "Ngoại thương Việt Nam (VCB)",
                            isActivate = true
                        },
                        new
                        {
                            BankId = 970441L,
                            BankCode = "VIB",
                            BankName = "Quốc tế (VIB)",
                            isActivate = true
                        },
                        new
                        {
                            BankId = 970443L,
                            BankCode = "SHB",
                            BankName = "Sài Gòn Hà Nội (SHB)",
                            isActivate = true
                        },
                        new
                        {
                            BankId = 970449L,
                            BankCode = "LPB",
                            BankName = "Bưu điện Liên Việt (LPB)",
                            isActivate = true
                        });
                });

            modelBuilder.Entity("BusinessObject.Entities.BusinessFee", b =>
                {
                    b.Property<long>("BusinessFeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("BusinessFeeId"), 1L, 1);

                    b.Property<long>("Fee")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("BusinessFeeId");

                    b.ToTable("BusinessFee");

                    b.HasData(
                        new
                        {
                            BusinessFeeId = 1L,
                            Fee = 5L,
                            StartDate = new DateTime(2023, 10, 4, 21, 42, 45, 617, DateTimeKind.Local).AddTicks(565)
                        });
                });

            modelBuilder.Entity("BusinessObject.Entities.Cart", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<long>("ProductVariantId")
                        .HasColumnType("bigint");

                    b.Property<long>("Quantity")
                        .HasColumnType("bigint");

                    b.HasKey("UserId", "ProductVariantId");

                    b.HasIndex("ProductVariantId");

                    b.ToTable("Cart");
                });

            modelBuilder.Entity("BusinessObject.Entities.Category", b =>
                {
                    b.Property<long>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("CategoryId"), 1L, 1);

                    b.Property<string>("CategoryName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategoryId");

                    b.ToTable("Category");

                    b.HasData(
                        new
                        {
                            CategoryId = 1L,
                            CategoryName = "Mạng xã hội"
                        },
                        new
                        {
                            CategoryId = 2L,
                            CategoryName = "VPS"
                        },
                        new
                        {
                            CategoryId = 3L,
                            CategoryName = "Khác"
                        });
                });

            modelBuilder.Entity("BusinessObject.Entities.Conversation", b =>
                {
                    b.Property<long>("ConversationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ConversationId"), 1L, 1);

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActivate")
                        .HasColumnType("bit");

                    b.HasKey("ConversationId");

                    b.ToTable("Conversations");
                });

            modelBuilder.Entity("BusinessObject.Entities.Coupon", b =>
                {
                    b.Property<long>("CouponId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("CouponId"), 1L, 1);

                    b.Property<string>("CouponName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<long>("PriceDiscount")
                        .HasColumnType("bigint");

                    b.Property<long>("Quantity")
                        .HasColumnType("bigint");

                    b.Property<long>("ShopId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("CouponId");

                    b.HasIndex("ShopId");

                    b.ToTable("Coupon");
                });

            modelBuilder.Entity("BusinessObject.Entities.DepositTransaction", b =>
                {
                    b.Property<long>("DepositTransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("DepositTransactionId"), 1L, 1);

                    b.Property<long>("Amount")
                        .HasColumnType("bigint");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsPay")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("PaidDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("RequestDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("DepositTransactionId");

                    b.HasIndex("UserId");

                    b.ToTable("DepositTransaction");
                });

            modelBuilder.Entity("BusinessObject.Entities.Feedback", b =>
                {
                    b.Property<long>("FeedbackId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("FeedbackId"), 1L, 1);

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<int>("Rate")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("FeedbackId");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("Feedback");
                });

            modelBuilder.Entity("BusinessObject.Entities.FeedbackMedia", b =>
                {
                    b.Property<long>("FeedbackMediaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("FeedbackMediaId"), 1L, 1);

                    b.Property<long>("FeedbackId")
                        .HasColumnType("bigint");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FeedbackMediaId");

                    b.HasIndex("FeedbackId");

                    b.ToTable("FeedbackMedia");
                });

            modelBuilder.Entity("BusinessObject.Entities.Message", b =>
                {
                    b.Property<long>("MessageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("MessageId"), 1L, 1);

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("ConversationId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("MessageType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("MessageId");

                    b.HasIndex("ConversationId");

                    b.HasIndex("UserId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("BusinessObject.Entities.Notification", b =>
                {
                    b.Property<long>("NotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("NotificationId"), 1L, 1);

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsReaded")
                        .HasColumnType("bit");

                    b.Property<string>("Link")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("NotificationId");

                    b.HasIndex("UserId");

                    b.ToTable("Notification");
                });

            modelBuilder.Entity("BusinessObject.Entities.Order", b =>
                {
                    b.Property<long>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("OrderId"), 1L, 1);

                    b.Property<long>("BusinessFeeId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsFeedback")
                        .HasColumnType("bit");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("OrderStatusId")
                        .HasColumnType("bigint");

                    b.Property<long>("Price")
                        .HasColumnType("bigint");

                    b.Property<long>("ProductVariantId")
                        .HasColumnType("bigint");

                    b.Property<long>("Quantity")
                        .HasColumnType("bigint");

                    b.Property<long>("TotalAmount")
                        .HasColumnType("bigint");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("OrderId");

                    b.HasIndex("BusinessFeeId");

                    b.HasIndex("OrderStatusId");

                    b.HasIndex("ProductVariantId");

                    b.HasIndex("UserId");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("BusinessObject.Entities.OrderCoupon", b =>
                {
                    b.Property<long>("OrderId")
                        .HasColumnType("bigint");

                    b.Property<long>("CouponId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UseDate")
                        .HasColumnType("datetime2");

                    b.HasKey("OrderId", "CouponId");

                    b.HasIndex("CouponId");

                    b.ToTable("OrderCoupon");
                });

            modelBuilder.Entity("BusinessObject.Entities.OrderStatus", b =>
                {
                    b.Property<long>("OrderStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("OrderStatusId"), 1L, 1);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("OrderStatusId");

                    b.ToTable("OrderStatus");

                    b.HasData(
                        new
                        {
                            OrderStatusId = 1L,
                            Name = "Wait for customer confirmation"
                        },
                        new
                        {
                            OrderStatusId = 2L,
                            Name = "Confirmed"
                        },
                        new
                        {
                            OrderStatusId = 3L,
                            Name = "Complaint"
                        },
                        new
                        {
                            OrderStatusId = 4L,
                            Name = "Dispute"
                        },
                        new
                        {
                            OrderStatusId = 5L,
                            Name = "Reject Complaint"
                        },
                        new
                        {
                            OrderStatusId = 6L,
                            Name = "Seller violates"
                        });
                });

            modelBuilder.Entity("BusinessObject.Entities.Product", b =>
                {
                    b.Property<long>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ProductId"), 1L, 1);

                    b.Property<long>("CategoryId")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Discount")
                        .HasColumnType("int");

                    b.Property<string>("ProductName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("ProductStatusId")
                        .HasColumnType("bigint");

                    b.Property<long>("ShopId")
                        .HasColumnType("bigint");

                    b.Property<string>("Thumbnail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ProductId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ProductStatusId");

                    b.HasIndex("ShopId");

                    b.ToTable("Product");
                });

            modelBuilder.Entity("BusinessObject.Entities.ProductMedia", b =>
                {
                    b.Property<long>("ProductMediaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ProductMediaId"), 1L, 1);

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProductMediaId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductMedia");
                });

            modelBuilder.Entity("BusinessObject.Entities.ProductStatus", b =>
                {
                    b.Property<long>("ProductStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ProductStatusId"), 1L, 1);

                    b.Property<string>("ProductStatusName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProductStatusId");

                    b.ToTable("ProductStatus");

                    b.HasData(
                        new
                        {
                            ProductStatusId = 1L,
                            ProductStatusName = "Active"
                        },
                        new
                        {
                            ProductStatusId = 2L,
                            ProductStatusName = "Ban"
                        },
                        new
                        {
                            ProductStatusId = 3L,
                            ProductStatusName = "Hide"
                        });
                });

            modelBuilder.Entity("BusinessObject.Entities.ProductVariant", b =>
                {
                    b.Property<long>("ProductVariantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ProductVariantId"), 1L, 1);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("Price")
                        .HasColumnType("bigint");

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<bool>("isActivate")
                        .HasColumnType("bit");

                    b.HasKey("ProductVariantId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductVariant");
                });

            modelBuilder.Entity("BusinessObject.Entities.RefreshToken", b =>
                {
                    b.Property<long>("RefreshTokenId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("RefreshTokenId"), 1L, 1);

                    b.Property<DateTime>("ExpiredDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("JwtId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TokenRefresh")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("RefreshTokenId");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshToken");
                });

            modelBuilder.Entity("BusinessObject.Entities.Role", b =>
                {
                    b.Property<long>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("RoleId"), 1L, 1);

                    b.Property<string>("RoleName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RoleId");

                    b.ToTable("Role");

                    b.HasData(
                        new
                        {
                            RoleId = 1L,
                            RoleName = "Admin"
                        },
                        new
                        {
                            RoleId = 2L,
                            RoleName = "Customer"
                        },
                        new
                        {
                            RoleId = 3L,
                            RoleName = "Seller"
                        });
                });

            modelBuilder.Entity("BusinessObject.Entities.Shop", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<long>("Balance")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("ShopName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("Shop");
                });

            modelBuilder.Entity("BusinessObject.Entities.Tag", b =>
                {
                    b.Property<long>("TagId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("TagId"), 1L, 1);

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<string>("TagName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TagId");

                    b.HasIndex("ProductId");

                    b.ToTable("Tag");
                });

            modelBuilder.Entity("BusinessObject.Entities.Transaction", b =>
                {
                    b.Property<long>("TransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("TransactionId"), 1L, 1);

                    b.Property<DateTime?>("DateCreate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("OrderId")
                        .HasColumnType("bigint");

                    b.Property<long>("PaymentAmount")
                        .HasColumnType("bigint");

                    b.Property<long>("TransactionTypeId")
                        .HasColumnType("bigint");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("TransactionId");

                    b.HasIndex("OrderId");

                    b.HasIndex("TransactionTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("Transaction");
                });

            modelBuilder.Entity("BusinessObject.Entities.TransactionType", b =>
                {
                    b.Property<long>("TransactionTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("TransactionTypeId"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TransactionTypeId");

                    b.ToTable("TransactionType");

                    b.HasData(
                        new
                        {
                            TransactionTypeId = 1L,
                            Name = "Payment"
                        },
                        new
                        {
                            TransactionTypeId = 2L,
                            Name = "Receive payment"
                        },
                        new
                        {
                            TransactionTypeId = 3L,
                            Name = "Receive refund"
                        },
                        new
                        {
                            TransactionTypeId = 4L,
                            Name = "Profit"
                        });
                });

            modelBuilder.Entity("BusinessObject.Entities.TwoFactorAuthentication", b =>
                {
                    b.Property<long>("TwoFactorAuthenticationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("TwoFactorAuthenticationId"), 1L, 1);

                    b.Property<string>("SecretKey")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("TwoFactorAuthenticationId");

                    b.HasIndex("UserId");

                    b.ToTable("TwoFactorAuthentication");
                });

            modelBuilder.Entity("BusinessObject.Entities.User", b =>
                {
                    b.Property<long>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("UserId"), 1L, 1);

                    b.Property<long>("AccountBalance")
                        .HasColumnType("bigint");

                    b.Property<string>("Avatar")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Fullname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsConfirm")
                        .HasColumnType("bit");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.Property<bool>("SignInGoogle")
                        .HasColumnType("bit");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<bool>("TwoFactorAuthentication")
                        .HasColumnType("bit");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.HasIndex("RoleId");

                    b.ToTable("User");

                    b.HasData(
                        new
                        {
                            UserId = 1L,
                            AccountBalance = 0L,
                            Avatar = "",
                            Email = "",
                            Fullname = "Admin",
                            IsConfirm = true,
                            Password = "123",
                            RoleId = 1L,
                            SignInGoogle = false,
                            Status = true,
                            TwoFactorAuthentication = false,
                            Username = "admin"
                        });
                });

            modelBuilder.Entity("BusinessObject.Entities.UserBank", b =>
                {
                    b.Property<long>("UserBankId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("UserBankId"), 1L, 1);

                    b.Property<long>("BankId")
                        .HasColumnType("bigint");

                    b.Property<string>("CreditAccount")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreditAccountName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<bool>("isActivate")
                        .HasColumnType("bit");

                    b.HasKey("UserBankId");

                    b.HasIndex("BankId");

                    b.HasIndex("UserId");

                    b.ToTable("UserBank");
                });

            modelBuilder.Entity("BusinessObject.Entities.UserConversation", b =>
                {
                    b.Property<long>("UserConversationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("UserConversationId"), 1L, 1);

                    b.Property<long>("ConversationId")
                        .HasColumnType("bigint");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("UserConversationId");

                    b.HasIndex("ConversationId");

                    b.HasIndex("UserId");

                    b.ToTable("UserConversation");
                });

            modelBuilder.Entity("BusinessObject.Entities.WithdrawTransaction", b =>
                {
                    b.Property<long>("WithdrawTransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("WithdrawTransactionId"), 1L, 1);

                    b.Property<long>("Amount")
                        .HasColumnType("bigint");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsPay")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("PaidDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("RequestDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("UserBankId")
                        .HasColumnType("bigint");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("WithdrawTransactionId");

                    b.HasIndex("UserBankId");

                    b.HasIndex("UserId");

                    b.ToTable("WithdrawTransaction");
                });

            modelBuilder.Entity("BusinessObject.Entities.WithdrawTransactionBill", b =>
                {
                    b.Property<long>("WidrawTransactionBillId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("WidrawTransactionBillId"), 1L, 1);

                    b.Property<string>("AccountNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AvailableBalance")
                        .HasColumnType("int");

                    b.Property<string>("BankName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BenAccountName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BenAccountNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BeneficiaryAccount")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CreditAmount")
                        .HasColumnType("int");

                    b.Property<string>("Currency")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DebitAmount")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DocId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("PostingDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("RefNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("TransactionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TransactionType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("WithdrawTransactionId")
                        .HasColumnType("bigint");

                    b.HasKey("WidrawTransactionBillId");

                    b.HasIndex("WithdrawTransactionId");

                    b.ToTable("WithdrawTransactionBill");
                });

            modelBuilder.Entity("BusinessObject.Entities.AccessToken", b =>
                {
                    b.HasOne("BusinessObject.Entities.User", "User")
                        .WithMany("AccessTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("BusinessObject.Entities.AssetInformation", b =>
                {
                    b.HasOne("BusinessObject.Entities.Order", "Order")
                        .WithMany("AssetInformation")
                        .HasForeignKey("OrderId");

                    b.HasOne("BusinessObject.Entities.ProductVariant", "ProductVariant")
                        .WithMany("AssetInformation")
                        .HasForeignKey("ProductVariantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObject.Entities.User", null)
                        .WithMany("AssetInformation")
                        .HasForeignKey("UserId");

                    b.Navigation("Order");

                    b.Navigation("ProductVariant");
                });

            modelBuilder.Entity("BusinessObject.Entities.Cart", b =>
                {
                    b.HasOne("BusinessObject.Entities.ProductVariant", "ProductVariant")
                        .WithMany("Carts")
                        .HasForeignKey("ProductVariantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObject.Entities.User", "User")
                        .WithMany("Carts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ProductVariant");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BusinessObject.Entities.Coupon", b =>
                {
                    b.HasOne("BusinessObject.Entities.Shop", "Shop")
                        .WithMany("Coupons")
                        .HasForeignKey("ShopId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Shop");
                });

            modelBuilder.Entity("BusinessObject.Entities.DepositTransaction", b =>
                {
                    b.HasOne("BusinessObject.Entities.User", "User")
                        .WithMany("DepositTransactions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("BusinessObject.Entities.Feedback", b =>
                {
                    b.HasOne("BusinessObject.Entities.Product", "Product")
                        .WithMany("Feedbacks")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObject.Entities.User", "User")
                        .WithMany("Feedbacks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BusinessObject.Entities.FeedbackMedia", b =>
                {
                    b.HasOne("BusinessObject.Entities.Feedback", "Feedback")
                        .WithMany("FeedbackMedias")
                        .HasForeignKey("FeedbackId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Feedback");
                });

            modelBuilder.Entity("BusinessObject.Entities.Message", b =>
                {
                    b.HasOne("BusinessObject.Entities.Conversation", "Conversation")
                        .WithMany("Messages")
                        .HasForeignKey("ConversationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObject.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Conversation");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BusinessObject.Entities.Notification", b =>
                {
                    b.HasOne("BusinessObject.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("BusinessObject.Entities.Order", b =>
                {
                    b.HasOne("BusinessObject.Entities.BusinessFee", "BusinessFee")
                        .WithMany("Orders")
                        .HasForeignKey("BusinessFeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObject.Entities.OrderStatus", "OrderStatus")
                        .WithMany("Orders")
                        .HasForeignKey("OrderStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObject.Entities.ProductVariant", "ProductVariant")
                        .WithMany("Orders")
                        .HasForeignKey("ProductVariantId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BusinessObject.Entities.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("BusinessFee");

                    b.Navigation("OrderStatus");

                    b.Navigation("ProductVariant");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BusinessObject.Entities.OrderCoupon", b =>
                {
                    b.HasOne("BusinessObject.Entities.Coupon", "Coupon")
                        .WithMany("OrderCoupons")
                        .HasForeignKey("CouponId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObject.Entities.Order", "Order")
                        .WithMany("OrderCoupons")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Coupon");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("BusinessObject.Entities.Product", b =>
                {
                    b.HasOne("BusinessObject.Entities.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObject.Entities.ProductStatus", "ProductStatus")
                        .WithMany()
                        .HasForeignKey("ProductStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObject.Entities.Shop", "Shop")
                        .WithMany("Products")
                        .HasForeignKey("ShopId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("ProductStatus");

                    b.Navigation("Shop");
                });

            modelBuilder.Entity("BusinessObject.Entities.ProductMedia", b =>
                {
                    b.HasOne("BusinessObject.Entities.Product", "Product")
                        .WithMany("ProductMedias")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("BusinessObject.Entities.ProductVariant", b =>
                {
                    b.HasOne("BusinessObject.Entities.Product", "Product")
                        .WithMany("ProductVariants")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("BusinessObject.Entities.RefreshToken", b =>
                {
                    b.HasOne("BusinessObject.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("BusinessObject.Entities.Shop", b =>
                {
                    b.HasOne("BusinessObject.Entities.User", "User")
                        .WithOne("Shop")
                        .HasForeignKey("BusinessObject.Entities.Shop", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("BusinessObject.Entities.Tag", b =>
                {
                    b.HasOne("BusinessObject.Entities.Product", "Product")
                        .WithMany("Tags")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("BusinessObject.Entities.Transaction", b =>
                {
                    b.HasOne("BusinessObject.Entities.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObject.Entities.TransactionType", "TransactionType")
                        .WithMany("Transactions")
                        .HasForeignKey("TransactionTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObject.Entities.User", "User")
                        .WithMany("Transactions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("TransactionType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BusinessObject.Entities.TwoFactorAuthentication", b =>
                {
                    b.HasOne("BusinessObject.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("BusinessObject.Entities.User", b =>
                {
                    b.HasOne("BusinessObject.Entities.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("BusinessObject.Entities.UserBank", b =>
                {
                    b.HasOne("BusinessObject.Entities.Bank", "Bank")
                        .WithMany("UserBanks")
                        .HasForeignKey("BankId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObject.Entities.User", "User")
                        .WithMany("UserBanks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bank");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BusinessObject.Entities.UserConversation", b =>
                {
                    b.HasOne("BusinessObject.Entities.Conversation", "Conversation")
                        .WithMany("UserConversations")
                        .HasForeignKey("ConversationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObject.Entities.User", "User")
                        .WithMany("UserConversations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Conversation");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BusinessObject.Entities.WithdrawTransaction", b =>
                {
                    b.HasOne("BusinessObject.Entities.UserBank", "UserBank")
                        .WithMany("WithdrawTransactions")
                        .HasForeignKey("UserBankId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BusinessObject.Entities.User", "User")
                        .WithMany("WithdrawTransactions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("UserBank");
                });

            modelBuilder.Entity("BusinessObject.Entities.WithdrawTransactionBill", b =>
                {
                    b.HasOne("BusinessObject.Entities.WithdrawTransaction", "WithdrawTransaction")
                        .WithMany()
                        .HasForeignKey("WithdrawTransactionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WithdrawTransaction");
                });

            modelBuilder.Entity("BusinessObject.Entities.Bank", b =>
                {
                    b.Navigation("UserBanks");
                });

            modelBuilder.Entity("BusinessObject.Entities.BusinessFee", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("BusinessObject.Entities.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("BusinessObject.Entities.Conversation", b =>
                {
                    b.Navigation("Messages");

                    b.Navigation("UserConversations");
                });

            modelBuilder.Entity("BusinessObject.Entities.Coupon", b =>
                {
                    b.Navigation("OrderCoupons");
                });

            modelBuilder.Entity("BusinessObject.Entities.Feedback", b =>
                {
                    b.Navigation("FeedbackMedias");
                });

            modelBuilder.Entity("BusinessObject.Entities.Order", b =>
                {
                    b.Navigation("AssetInformation");

                    b.Navigation("OrderCoupons");
                });

            modelBuilder.Entity("BusinessObject.Entities.OrderStatus", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("BusinessObject.Entities.Product", b =>
                {
                    b.Navigation("Feedbacks");

                    b.Navigation("ProductMedias");

                    b.Navigation("ProductVariants");

                    b.Navigation("Tags");
                });

            modelBuilder.Entity("BusinessObject.Entities.ProductVariant", b =>
                {
                    b.Navigation("AssetInformation");

                    b.Navigation("Carts");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("BusinessObject.Entities.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("BusinessObject.Entities.Shop", b =>
                {
                    b.Navigation("Coupons");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("BusinessObject.Entities.TransactionType", b =>
                {
                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("BusinessObject.Entities.User", b =>
                {
                    b.Navigation("AccessTokens");

                    b.Navigation("AssetInformation");

                    b.Navigation("Carts");

                    b.Navigation("DepositTransactions");

                    b.Navigation("Feedbacks");

                    b.Navigation("Orders");

                    b.Navigation("Shop")
                        .IsRequired();

                    b.Navigation("Transactions");

                    b.Navigation("UserBanks");

                    b.Navigation("UserConversations");

                    b.Navigation("WithdrawTransactions");
                });

            modelBuilder.Entity("BusinessObject.Entities.UserBank", b =>
                {
                    b.Navigation("WithdrawTransactions");
                });
#pragma warning restore 612, 618
        }
    }
}
